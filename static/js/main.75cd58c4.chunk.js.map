{"version":3,"sources":["componentes/Header.js","componentes/Formulario.js","componentes/error.js","componentes/clima.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","titulo","Formulario","ciudadRef","React","createRef","paisRef","buscarClima","e","preventDefault","respuesta","ciudad","_this","current","value","pais","console","log","datosConsulta","onSubmit","this","id","ref","type","htmlFor","default","Component","Error","mensaje","protoTypes","PropTypes","string","isRequired","Clima","mostrarResultados","_this$props$resultado","resultado","name","weather","main","urlIcono","concat","icon","temp","toFixed","src","alt","temp_max","temp_min","App","state","error","consulta","setState","consultarApi","_this$state$consulta","url","fetch","then","response","json","data","catch","prevProps","prevState","cod","componentes_error","clima_Clima","componentes_Header","Formulario_Formulario","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.75cd58c4.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <div>\r\n      <nav>\r\n          <div className='nav-wrapper light-blue darken-2'>\r\n           <a className=\"brand-logo\">{props.titulo}</a>\r\n          </div>\r\n        </nav>\r\n    </div>\r\n  )\r\n}\r\n\r\nHeader.propTypes = {\r\n  titulo: PropTypes.string.isRequired\r\n}\r\nexport default Header\r\n","import React, { Component } from 'react'\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default class Formulario extends Component {\r\n\r\n//creaer los Refs\r\n   ciudadRef = React.createRef();\r\n   paisRef = React.createRef();\r\nbuscarClima = (e) =>{\r\n e.preventDefault();\r\n  //leer los refs\r\n const respuesta = {\r\n     ciudad:this.ciudadRef.current.value,\r\n     pais:this.paisRef.current.value\r\n }\r\nconsole.log('hey')\r\n  //enviar por props\r\n        this.props.datosConsulta(respuesta)\r\n  //opcional resetear el form\r\n}\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"contenedor-form\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <form onSubmit={this.buscarClima}>\r\n                <div className=\"input-field col s12 m8 l4 offset-m2\">\r\n                    <input id='ciudad' ref={this.ciudadRef} type='text'></input>\r\n                    <label htmlFor='ciudad'>Ciudad:</label>\r\n\r\n                </div>\r\n                <div className=\"input-field col s12 m8 l4 offset-m2\">\r\n                    <select ref={this.paisRef} >\r\n                        <option value=\"\" default>Elige un pais</option>\r\n                        <option value=\"AR\" >Argentina</option>\r\n                        <option value=\"CR\" >Costa Rica</option>\r\n                        <option value=\"ES\" >Espa√±a</option>\r\n                        <option value=\"US\" >Estados Unidos</option>\r\n                        <option value=\"MX\" >Mexico</option>\r\n                        <option value=\"PE\" >Peru</option>\r\n                    </select>\r\n                    <label htmlFor='pais'>Pais:</label>\r\n\r\n                </div>\r\n                <div className='input-field col s12 m8 l4 offset-2 buscador'>\r\n                <input type=\"submit\" className=\"waves-effect waves-light btn-large yellow accent-4\" value=\"Buscar...\"></input>\r\n                </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nFormulario.propTypes = {\r\n  datosConsulta: PropTypes.func.isRequired\r\n}","import React from 'react'\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Error = (props) => {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col s12 m6 offset-m3\">\\\r\n            <div className=\"card-panel red darken-4 error\">\r\n                {props.mensaje}\r\n            </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nError.protoTypes = {\r\n  mensaje:PropTypes.string.isRequired\r\n}\r\nexport default Error\r\n","import React, { Component } from 'react'\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default class Clima extends Component {\r\n\r\nmostrarResultados = () =>{\r\n  const {name,weather,main} = this.props.resultado\r\n    if(!name || !weather || !main) return null\r\n      const kelvin = 273.15;\r\n      const urlIcono = `http://openweathermap.org/img/w/${weather[0].icon}.png`\r\n\r\n    return(\r\n      <div className=\"row\">\r\n        <div className=\"resultado col s12 m8 l6 offset-m2 offset-l3\">\r\n          <div className=\"card-panel light-blue align-center\">\r\n           <span className='white-text'>\r\n               <h2> Resultado Clima de: {name} </h2>\r\n               <p className=\"temperatura\">\r\n                 Actual:{(main.temp-kelvin).toFixed(2)} &deg;C\r\n                 <img src={urlIcono} alt=\"`clima de ${name}`\" ></img>\r\n               </p>\r\n               <p>Max.{main.temp_max-kelvin}&deg;C</p>\r\n               <p>Min.{main.temp_min-kelvin}&deg;C</p>\r\n           </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n    \r\n}\r\n\r\n\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        {this.mostrarResultados()}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nClima.propTypes = {\r\n resultado:PropTypes.object.isRequired\r\n}\r\n","import React, { Component } from 'react';\nimport Header from './componentes/Header';\nimport Formulario from './componentes/Formulario';\nimport Error from \"./componentes/error\";\nimport Clima from \"./componentes/clima\";\nclass App extends Component {\n    state={\n      error:'',\n      consulta:{},\n      resultado:{}\n    }\n   componentDidMount(){\n    this.setState({error:false})\n   }\n   componentDidUpdate(prevProps,prevState){\n     if(prevState.consulta != this.state.consulta){\n      this.consultarApi();\n     }   \n   }\n\n  datosConsulta = respuesta => {\n      if(respuesta.ciudad ==='' || respuesta.pais === '')\n      {\n        this.setState({error:true})\n      }else{\n          this.setState(\n            {\n              consulta:respuesta,\n              error:false\n            }\n          )\n    }\n  }\n\n  consultarApi = () => {\n    const {ciudad,pais} = this.state.consulta;\n    if(!ciudad || !pais) return null\n    const appId = '32e89340cfc7e0260cfdc9ab6e64718f';\n    let url = `http://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=${appId}`;\n      fetch(url)\n      .then((response)=>response.json())\n      .then((data)=>{this.setState({resultado:data})})\n      .catch(e=>console.log(e)); \n  }\n\n\n\n  render() {\n    const error = this.state.error;\n    const {cod} = this.state.resultado\n    let resultado;\n    if(error){\n      resultado = <Error mensaje='Ambos campos son obligatorios'/>\n\n    }else if(cod == 404){\n      resultado = <Error mensaje='Ciudad No Encontrada '/>\n    }\n    else{\n      resultado = <Clima resultado={this.state.resultado}></Clima>\n    }\n\n\n    return (\n      <div className=\"App\">\n        <Header titulo=\"Clima React\"></Header>\n          <Formulario \n          datosConsulta={this.datosConsulta}\n          ></Formulario>\n          {resultado}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}